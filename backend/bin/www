#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const {Server} = require('socket.io');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const projectModel = require('../models/project.model');
const {generateResult} = require('../services/ai.service');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

io.use(async(socket, next) => {
  try {
    const token = socket.handshake.auth?.token || socket.handshake.headers.authorization?.split(' ')[1];
    const projectId = socket.handshake.query.projectId;

    if (!projectId || typeof projectId !== 'string' || !mongoose.Types.ObjectId.isValid(projectId)) {
      console.log('Authentication error: Invalid or missing projectId');
      return next(new Error("Authentication error: Invalid or missing projectId"));
    }

    if (!token) {
      console.log('Authentication error: Missing token');
      return next(new Error("Authentication error: Missing token"));
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded) {
      console.log('Authentication error: Invalid token');
      return next(new Error("Authentication error: Invalid token"));
    }

    const project = await projectModel.findById(projectId);
    if (!project) {
      console.log('Authentication error: Project not found');
      return next(new Error("Authentication error: Project not found"));
    }

    socket.user = decoded;
    socket.project = project;
    
    console.log('Authentication successful for project:', projectId);
    next();
    
  } catch (error) {
    console.log('Authentication error:', error.message);
    next(new Error("Authentication error: " + error.message));
  }
});

io.on('connection', (socket) => {
  console.log('A user connected! Socket ID:', socket.id);
  console.log('Project ID:', socket.project._id.toString());
  console.log('User:', socket.user.email || socket.user.id);
  
  socket.roomId = socket.project._id.toString();

  socket.join(socket.roomId);
  console.log('User joined room:', socket.roomId);
  
  const room = io.sockets.adapter.rooms.get(socket.roomId);
  console.log(`Room ${socket.roomId} now has ${room ? room.size : 0} members`);

  socket.on('event', async (data) => {
    console.log('Received event from client:', data);
    console.log('From project:', socket.project.name);
    console.log('From user:', socket.user.email || socket.user.id || socket.user._id);
    
    const currentRoom = io.sockets.adapter.rooms.get(socket.roomId);
    console.log('Broadcasting to room with', currentRoom ? currentRoom.size : 0, 'members');

    const userId = socket.user.id || socket.user._id || socket.user.userId;
    
    console.log('Complete user object from JWT:', JSON.stringify(socket.user, null, 2));

    const message = data.message;
    console.log('Message extracted:', message);

    const aiIsPresentInMessage = message.includes('@ai');
    console.log('AI present?', aiIsPresentInMessage);

    if (aiIsPresentInMessage) {
    
      const prompt = message.replace('@ai', '');

      const result = await generateResult(prompt);

      io.to(socket.roomId).emit('event', {
        message: result,
        sender:{
          _id: 'ai',
          email: 'AI'
        }
      });
      return;
    }  

    console.log('Past AI check, defining messageData...');
    
    const messageData = {
      message: data.message,
      sender: data.sender || userId,
      timestamp: new Date().toISOString(),
      projectId: socket.project._id.toString()
    };

    console.log('messageData defined successfully');
    console.log('Message data being broadcast:', JSON.stringify(messageData, null, 2));

    console.log('Broadcasting to room:', socket.roomId);
    io.to(socket.roomId).emit('event', messageData);
    console.log('Message broadcast complete');
  });

  socket.on('disconnect', () => {
    console.log('User disconnected! Socket ID:', socket.id);
    console.log('User:', socket.user.email || socket.user.id);
    
    setTimeout(() => {
      const room = io.sockets.adapter.rooms.get(socket.roomId);
      console.log(`Room ${socket.roomId} now has ${room ? room.size : 0} members`);
    }, 100);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  
  if (isNaN(port)) {
    return val;
  }
  
  if (port >= 0) {
    return port;
  }
  
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}