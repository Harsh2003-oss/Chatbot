#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const {Server} = require('socket.io');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const projectModel = require('../models/project.model');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

io.use(async(socket, next) => {
  try {
    const token = socket.handshake.auth?.token || socket.handshake.headers.authorization?.split(' ')[1];
    const projectId = socket.handshake.query.projectId;

    // Validate projectId
    if (!projectId || typeof projectId !== 'string' || !mongoose.Types.ObjectId.isValid(projectId)) {
      console.log('❌ Authentication error: Invalid or missing projectId');
      return next(new Error("Authentication error: Invalid or missing projectId"));
    }

    // Validate token
    if (!token) {
      console.log('❌ Authentication error: Missing token');
      return next(new Error("Authentication error: Missing token"));
    }

    // Verify JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded) {
      console.log('❌ Authentication error: Invalid token');
      return next(new Error("Authentication error: Invalid token"));
    }

    // Find project
    const project = await projectModel.findById(projectId);
    if (!project) {
      console.log('❌ Authentication error: Project not found');
      return next(new Error("Authentication error: Project not found"));
    }

    // Attach user and project to socket
    socket.user = decoded;
    socket.project = project;
    
    console.log('✅ Authentication successful for project:', projectId);
    next();
    
  } catch (error) {
    console.log('❌ Authentication error:', error.message);
    next(new Error("Authentication error: " + error.message));
  }
});

io.on('connection', (socket) => {
  console.log('✅ A user connected! Socket ID:', socket.id);
  console.log('📂 Project ID:', socket.project._id.toString());
  
  // Join the project room using the ObjectId converted to string
  socket.join(socket.project._id.toString());
  
  socket.on('event', (data) => {
    console.log('📨 Received event from client:', data);
    console.log('📂 From project:', socket.project.name);
    
    socket.emit('event', {
      message: 'Server received your message!',
      serverTime: new Date(),
      originalData: data,
      projectInfo: {
        id: socket.project._id,
        name: socket.project.name
      }
    });
  });
  
  socket.on('disconnect', () => {
    console.log('❌ User disconnected! Socket ID:', socket.id);
  });
});

// Rest of your code remains the same...
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  
  if (isNaN(port)) {
    return val;
  }
  
  if (port >= 0) {
    return port;
  }
  
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}