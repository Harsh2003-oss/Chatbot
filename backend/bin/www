#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const {Server} = require('socket.io');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

io.use((socket, next) => {

  try {
    const token = socket.handshake.auth?.token || socket.handshake.headers.authorization?.split(' ')[1];

    if (token !== "your_secret_token") {
      console.log('❌ Authentication error: Invalid token');

    }

const decoded = jwt.verify(token, process.env.JWT_SECRET);

if(!decoded){
  console.log('❌ Authentication error: Invalid token');
  return next(new Error("Authentication error: Invalid token"));
}

    socket.user = decoded;


    console.log('✅ Authentication successful');
    next();
    
  } catch (error) {
    next(error);
  }
  })

io.on('connection', (socket) => {
  console.log('✅ A user connected! Socket ID:', socket.id);
  
  socket.on('event', (data) => {
    console.log('📨 Received event from client:', data);
    socket.emit('event', { 
      message: 'Server received your message!', 
      serverTime: new Date(),
      originalData: data
    });
  });
  
  socket.on('disconnect', () => {
    console.log('❌ User disconnected! Socket ID:', socket.id);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
